@page "/experiments"
@using web.Models
@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager _navigationManager
@inject IJSRuntime JSRuntime
<h3>List of created experiments</h3>

<MudTable Items="_experiments">
    <HeaderContent>
        <MudTh>ID</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Dataset</MudTh>
        <MudTh>Window type</MudTh>
        <MudTh>Window size</MudTh>
        <MudTh>Window slide</MudTh>
        <MudTh>Include last log?</MudTh>
        <MudTh>Test ID</MudTh>
        <MudTh>Last modified at</MudTh>
        <MudTh>Status</MudTh>
        <MudTh></MudTh>
        <MudTh></MudTh>
        @* TODO add more empty headers for the buttons *@
    </HeaderContent>
    <RowTemplate>
        @* <MudTd><MudButton Disabled="@(!context.PaymentTypes.Any())" Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => ShowBtnPress(context))">@((context.Display == true) ? "Скриј" : "Прикажи") плаќања</MudButton></MudTd> *@
        <MudTd DataLabel="ID">@context.id</MudTd>
        <MudTd DataLabel="Name">@context.name</MudTd>
        <MudTd DataLabel="Dataset">@context.dataset</MudTd>
        <MudTd DataLabel="Window type">@context.window_type</MudTd>
        <MudTd DataLabel="Window size">@context.size</MudTd>
        <MudTd DataLabel="Window slide">@context.slide</MudTd>
        <MudTd DataLabel="Include last log?">@context.include_last_event</MudTd>
        <MudTd DataLabel="Test ID">@context.test_id</MudTd>
        <MudTd DataLabel="Last modified at">@context.last_modified_at</MudTd>
        <MudTd DataLabel="Status">@context.status</MudTd>
        <MudTd>
            <MudButton Color="Color.Info" Disabled="ShouldWindowsListBeDisabled(context)"OnClick="() => RouteToWindowsList(context.id)">Show windows</MudButton>
        </MudTd>
        <MudTd>
            <MudButton Color="Color.Error" OnClick="() => DeleteExperiment(context.id, context.name)">Delete</MudButton>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    List<ExperimentsDto>? _experiments = new();


    private async Task DeleteExperiment(int experimentId, string name)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure that you want to delete experiment with ID {experimentId} and name {name}?"))
            return;

        await Http.DeleteAsync("/experiments/delete/" + Convert.ToInt32(experimentId));
        _experiments?.RemoveAll(experiment => experiment.id == experimentId);
    }

    protected override async Task OnInitializedAsync()
    {
        _experiments = await Http.GetFromJsonAsync<List<ExperimentsDto>>("/experiments");
    }

    private void RouteToWindowsList(int experimentId)
    {
        _navigationManager.NavigateTo("/experiment/windows/" + Convert.ToInt32(experimentId), true);
    }

    private bool ShouldWindowsListBeDisabled(ExperimentsDto context)
    {
        return !context.status.Equals("SUCCESS");
    }

}